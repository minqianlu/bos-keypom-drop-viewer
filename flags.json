{
  "components": {
    "display-num-drops.jsx/widget/": {
      "code": "const keypom_contract = \"v2.keypom.near\";\nconst userNum = Near.view(keypom_contract, \"get_drop_supply_for_owner\", {\n  account_id: state.user,\n});\n\n// if (!user){\n//     return \"Please Sign In\";\n// }\n\n// Init state\nState.init({\n  num_drops: 0,\n  user: context.accountId,\n});\n\n// Do not update state.num_drops until BtnClick\nconst onInputChange = ({ target }) => {\n  State.update({\n    user: target.value,\n    num_drops:0\n  });\n};\n\nconst onBtnClick = () => {\n  // if (!state.user) {\n  //   return;\n  // }\n\n//   let tempNum = Near.view(keypom_contract, \"get_drop_supply_for_owner\", {\n//     account_id: state.user,\n//   });\n\n  State.update({\n    num_drops: userNum,\n  });\n};\n\nconst get_user_form = (\n  <>\n    <div class=\"border border-black p-3\">\n      <label>User Account ID</label>\n      <input placeholder=\"benji.near\" onChange={onInputChange} />\n      <button class=\"btn btn-primary mt-2\" onClick={onBtnClick}>\n        Update\n      </button>\n    </div>\n  </>\n);\n\n// Render\nreturn (\n  <>\n    <div class=\"container border border-info p-3\">\n      <h3 class=\"text-center\">\n        The number of drops for {state.user}:\n        <span class=\"text-decoration-underline\"> {state.num_drops} </span>\n      </h3>\n\n      {get_user_form}\n    </div>\n  </>\n);"
    },
    "view-my-drops.jsx/widget/": {
      "code": "const user = context.accountId;\n\nif (!user) {\n  return \"Please Sign In!\";\n}\n\nState.init({\n  numDrops,\n  dropIds: [],\n  dropTypes: [],\n});\n\nconst keypom_contract = \"v2.keypom.near\";\nlet my_drops = Near.view(keypom_contract, \"get_drops_for_owner\", {\n    // account_id: context.accountId,\n    account_id: \"root.benjiman.near\",\n});\n\nlet drop_ids = [];\nlet drop_types = [];\n\nlet str = \"filler\";\n\nfor (var i = 0; i < my_drops.length; i++) {\n  drop_ids.push(my_drops[i].drop_id);\n  if (my_drops[i].hasOwnProperty(\"simple\")) {\n    drop_types.push(\"Simple Drop\");\n  } else if (my_drops[i].hasOwnProperty(\"nft\")) {\n    drop_types.push(\"Non-Fungible Token Drop\");\n  } else if (my_drops[i].hasOwnProperty(\"ft\")) {\n    drop_types.push(\"Fungible Token Drop\");\n  } else if (my_drops[i].hasOwnProperty(\"fc\")) {\n    drop_types.push(\"Function Call Drop\");\n  } else {\n    drop_types.push(\"Unknown\");\n  }\n}\n\n// // Map over the array and create an array of strings with the desired elements\n// const renderedElements = drop.map(\n//   (element, index) => `Element ${index + 1}: ${element}`\n// );\n\n// // Join the array of strings into a single string\n// const renderedOutput = renderedElements.join(\"\\n\");\n\nState.update({\n  //   numDrops: my_drops.length,\n  dropIds: drop_ids,\n  dropTypes: drop_types,\n});\n\n// const uglyIdDispley = (\n//   <>\n//     <div class=\"border border-black p-3\">\n//       <label>Drop IDs</label>\n//     </div>\n//   </>\n// );\n//   <h3 class=\"text-center\">Your Drop IDs:</h3>\n//   <p>\n//     {\" \"}\n//     {state.dropIds.map((el, index) => {\n//       <p key={index}>{el}</p>;\n//     })}{\" \"}\n//   </p>\n//   <h3 class=\"text-center\">Types of Drops:</h3>\n//   <p>\n//     {\" \"}\n//     {state.dropTypes.map((el, index) => {\n//       <p key={index}>{el}</p>;\n//     })}{\" \"}\n//   </p>\n// Render\n\nreturn (\n  <>\n    <div class=\"container border border-info p-3\">\n      <h2 class=\"text-center\"> LIMITED TO 50 </h2>\n      <h3 class=\"text-center\">Number of Drops:</h3>\n      <p class=\"text-center\"> {my_drops.length} </p>\n      <h3 class=\"text-center\">Your Drop's IDs:</h3>\n      <p class=\"text-center\">\n        {state.dropIds.map((id) => (\n          <div key={id}> {id} </div>\n        ))}\n      </p>\n      <h3 class=\"text-center\">Your Drop Types:</h3>\n      <p class=\"text-center\">\n        {state.dropTypes.map((type) => (\n          <div key={type}> {type} </div>\n        ))}\n      </p>\n    </div>\n  </>\n);\n"
    },
    "drop-info.jsx/widget/": {
      "code": "const user = context.accountId;\n\nif (!user) {\n  return \"Please Sign In!\";\n}\n\nconst keypom_contract = \"v2.keypom.testnet\";\n\nlet my_drops = Near.view(keypom_contract, \"get_drops_for_owner\", {\n  account_id: user,\n});\n\nlet keysVec = Near.view(keypom_contract, \"get_keys_for_drop\", {\n  drop_id: my_drops[my_drops.length - 1],\n});\n\nState.init({\n  dropId: my_drops[my_drops.length - 1],\n  keys: keysVec,\n});\n\nState.update({\n  //   numDrops: my_drops.length,\n  dropIds: drop_ids,\n  dropTypes: drop_types,\n});\n\n// const uglyIdDispley = (\n//   <>\n//     <div class=\"border border-black p-3\">\n//       <label>Drop IDs</label>\n//     </div>\n//   </>\n// );\n//   <h3 class=\"text-center\">Your Drop IDs:</h3>\n//   <p>\n//     {\" \"}\n//     {state.dropIds.map((el, index) => {\n//       <p key={index}>{el}</p>;\n//     })}{\" \"}\n//   </p>\n//   <h3 class=\"text-center\">Types of Drops:</h3>\n//   <p>\n//     {\" \"}\n//     {state.dropTypes.map((el, index) => {\n//       <p key={index}>{el}</p>;\n//     })}{\" \"}\n//   </p>\n// Render\n\nreturn (\n  <>\n    <div class=\"container border border-info p-3\">\n      <h2 class=\"text-center\"> LIMITED TO 50 </h2>\n      <h3 class=\"text-center\">Drop ID:</h3>\n      <p class=\"text-center\"> {state.dropId} </p>\n      <h3 class=\"text-center\">Keys:</h3>\n      <p class=\"text-center\">\n        {state.keys.map((key) => (\n          <div key={key}>\n            {\" \"}\n            Public Key: {key.pk} Remaining Uses: {key.remaining_uses}{\" \"}\n          </div>\n        ))}\n      </p>\n      <h3 class=\"text-center\">Your Drop Types:</h3>\n      <p class=\"text-center\">\n        {state.dropTypes.map((type) => (\n          <div key={type}> {type} </div>\n        ))}\n      </p>\n    </div>\n  </>\n);\n"
    }
  }
}